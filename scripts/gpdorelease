#!/bin/bash

# updated for git
# updated for 3.0

function usage {
	echo ">>> USAGE: gpdorelease <version>"
    echo "For kernel versions < 3, use the entire version: gpdorelease 2.6.39"
    echo " "
    echo "For kernels > 3: "
    echo "  Use the major and minor versions only. "
    echo "  Example for kernel version 3.0:  gpdorelease 3.0"
    echo "  Example for kernel version 3.0.1: gpdorelease 3.0"
    echo "  Example for kernel version 3.1:  gpdorelease 3.1"
    echo "  Example for kernel version 3.1.1:  gpdorelease 3.1"
}

if [[ ${#@} == 0 ]] ; then
    usage
    exit -1
fi


if [[ ${1} == "--config" ]] ; then
	echo "Sourcing ${2} instead of ~/.genpatchesrc"
	source ${2}
	shift 2
    if [[ ${#@} == 0 ]] ; then
        usage
        exit -1
    fi
else
	echo "Using default config at ~/.genpatchesrc"
	source ~/.genpatchesrc
fi

BRANCH="$1"

if [[ $(git -C ${LOCAL_PATCHES_TRUNK} status --porcelain | wc -l) != "0" ]] ; then
	echo ">>> ERROR: There are uncommited changes in ${LOCAL_PATCHES_TRUNK}"
	exit -1
fi

EXISTING_TAGS="$(git -C ${LOCAL_PATCHES_TRUNK} tag -l)"

lastver=0
for i in $EXISTING_TAGS ; do
	tag="${i%/}"
	if [[ ${tag/-*} == $BRANCH && ${tag#*-} -gt $lastver ]] ; then
		lastrelease="${tag}"
		lastver="${tag#*-}"
	fi
done


if [[ -z $lastrelease ]] ; then
	newrel="1"
else
	newrel="${lastrelease#${BRANCH}-}"
	(( newrel++ ))
fi

newfullver="${BRANCH}-${newrel}"

echo "I will now:"
echo "1. Tag the ${BRANCH} branch as ${newfullver} (immediate commit)"
echo "2. Produce genpatches-${newfullver} tarballs"
echo "3. Upload tarballs to ~<dev nick>/public_html/dist/genpatches"
echo "4. (Optionally) create and upload website"
echo "5. (Optionally) send a release announcement to gentoo-kernel"
echo
echo "Make sure everything is already committed and ready to roll."
echo "Press enter to continue."

read

# checkout branch
echo "Checking out branch ${BRANCH}"
cd ${LOCAL_PATCHES_TRUNK}

git -C ${LOCAL_PATCHES_TRUNK} checkout ${BRANCH}

file_base="/tmp/${TARBALL_BASENAME}-$newfullver.base.tar.xz"
file_extras="/tmp/${TARBALL_BASENAME}-$newfullver.extras.tar.xz"
file_experimental="/tmp/${TARBALL_BASENAME}-$newfullver.experimental.tar.xz"

#tag release
echo "Tagging with ${newfullver}"
git -C ${LOCAL_PATCHES_TRUNK} tag ${newfullver} || exit 1

# build tarballs
echo "Creating tarballs in /tmp..."

# Try very hard to ensure repeated generated of tarballs on different systems
# produces the same results.
# - the order of files inside the tarball should be alphabetic (rather than
#   disk or inode)
# - the owner/group of files inside the tarball should be root/root
# - the mtime of files inside the tarball should match the mtime of the commit
#   at HEAD of the tag.
# -- this might NOT be the mtime of the tag!
_mtime=$(git -C "${LOCAL_PATCHES_TRUNK}" log -1  --format=@%ct "${newfullver}")
TAR_CMD=(
	tar
	--group=root:0
	--owner=root:0
	--sort=name
	--mtime="$_mtime"
	--xz
	-cvf
)

if [[ "${WE_WANT}" == *"base"* ]] ; then
	[ -n "$(find ./[012]* 2>/dev/null)" ] && "${TAR_CMD[@]}" ${file_base} ./[012]*
fi

if [[ "${WE_WANT}" == *"extras"* ]] ; then
	[ -n "$(find ./[34]* 2>/dev/null)" ] && "${TAR_CMD[@]}" ${file_extras} ./[34]*
fi

if [[ "${WE_WANT}" == *"experimental"* ]] ; then
	[ -n "$(find ./50* 2>/dev/null)" ] && "${TAR_CMD[@]}" ${file_experimental} ./50*
fi

#push tag
echo "Pushing tag ${newfullver}"
git push --tags -u origin ${BRANCH}

# copy files to distfiles-local
#scp /tmp/${TARBALL_BASENAME}-$newfullver.* ${USERNAME}@dev.gentoo.org:/tmp
echo "scp'in files to dev.gentoo.org:~/public_html/dist/genpatches"
scp /tmp/${TARBALL_BASENAME}-$newfullver.* ${USERNAME}@dev.gentoo.org:~/public_html/dist/genpatches

##if [[ ${DO_WEBSITE} == "yes" ]] ; then
#	mv ${file_base} ${file_extras} ${file_experimental} ${WEB_LOCAL}/tarballs/
#	gpdoweb
#fi

[[ ${DO_EMAIL_ANNOUNCEMENT} == "yes" ]] && gpdoemail $newfullver $KERNEL_NAME
