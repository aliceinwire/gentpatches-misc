Intro
=====

Some scripts are used to aid maintenance (rolling releases, branching, etc).

Subversion has some nice features to maintain history while copying and
branching, which are used by these scripts.

For ease of use, these scripts use abbreviated arguments. The following
invokation would probably act on the 2.6.11 branch:

# gpwhatever 11

And the following invokation would probably act on patch with code 1014 in the
2.6.11 branch:

# gpwhatever 11 1014

Global Configuration
====================

To use the scripts, you need to create a .genpatchesrc file in your home
directory. This file is sourced as raw bash. You simply set some configuration
variables.

Here's a sample config:

--- start ~/.genpatchesrc -----------------------------------------------------
# Your username for Gentoo Git
USERNAME="mpagano"

# The path to the directory where you have cloned the repo
LOCAL_PATCHES_TRUNK="/home/mike/gentoo/linux-patches"

#temporary directory
LOCAL_TMP="/tmp"

# Remote repository configuration
REMOTE_BASE="git+ssh://git@git.gentoo.org/proj/linux-patches.git"

TARBALL_BASENAME="genpatches"
KERNEL_NAME="genpatches"

DO_WEBSITE="no"
DO_EMAIL_ANNOUNCEMENT="yes"

# Website/email stuff
WEB_LOCAL="/home/mike/gentoo/linux-patches-misc/web"
WEB_GENPATCHES_BASE="dev.gentoo.org:/home/mpagano/public_html/genpatches"
SENDMAIL="ssh mpagano@dev.gentoo.org /usr/sbin/sendmail"

WE_WANT="base extras experimental"

--- end ~/.genpatchesrc -------------------------------------------------------

gppatch
=======

TODO - not yet converted go support git migration

Applies a single genpatches patch to a kernel source tree in the current
directory.

Usage:
# cd /usr/src/linux
# gppatch 11 1025

This will take the patch with code 1025 from the 2.6.11 branch of your trunk
checkout and apply it.

Any additional arguments you specify will be passed onto patch(1) as normal.
To dry-run a patch you can do:

# gppatch 11 1030 --dry-run

gpmultipatch
============

TODO - not yet converted go support git migration

Applies a trunk genpatches branch to a kernel source tree in the current
directory.

This will cycle through all the patches in numerical order and apply them.

Usage:
# cd /usr/src/linux
# gpmultipatch 11

This will apply all the patches in the 2.6.11 branch to /usr/src/linux.
Each patch is checked with dry-run before being applied. If a patch fails the
dry-run test, then it is not applied and the entire script halts there, telling
you which patch needs fixing.

Assume that it tells you patch 2900 fails to apply. You'd then create a new
kernel tree and do a rediff or whatever. Once you have fixed up the patch, you
can tell gpmultipatch to continue applying the series from that particular
patch:

# cd /usr/src/linux
# gpmultipatch 11 2900

This will apply the 2.6.11 branch patches in order, but ignoring all patches
with code less than 2900.

gpdorelease
===========

Takes a branch, produces tarballs, uploads tarballs to toucan, and tags the
release snapshot in SVN.

See 20_release-howto

TODO:
QA checks
Sanity checks (svn status is empty etc)
Post-commit hooks

gpcreatebranch
==============

TODO - not yet converted go support git migration

Copy one branch to another under trunk.

Example: This will create a 2.6.13-pre branch from the 2.6.12 branch
# gpcreatebranch 12 13-pre


gpmvhistorical
==============

TODO - not yet converted go support git migration

Move a trunk branch into historical

Example: Move 2.6.11 into historical:
# gpmvhistorical 11

